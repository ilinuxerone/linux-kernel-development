linux 2.6内核PCI驱动程序开发

一。 PCI相关数据结构
#include <linux/pci.h>
struct pci_driver  {
	struct list_head node;
	char *name;
	const struct pci_device_id  *id_table;
	int (*probe)(struct pci_dev *dev, const struct pci_device_id *id);
	void (*remove)(struct pci_dev *dev);
	int (*save_state)(struct pci_dev *dev, u32 state);
	int (*suspend)(struct pci_dev *dev, u32 state);
	int (*resume)(struct pci_dev *dev);
	int (*enable_wake)(struct pci_dev *dev, u32 state, int enable);
};

为创建一个正确的struct pci_driver 结构， 只有4个字段需要被初始化：
name;
id_table;
probe;
和remove;

其中id_table初始化可以用到宏PCI_DEVICE(VENDOR_ID, DEVICE_ID);

#include <linux/pci.h>
1.2 struct pci_dev 这个数据结构详细描述了一个PCi设备所有的硬件信息。

二PCI驱动基本框架
	在用模块方式实现PCI设备驱动程序时，通常至少要实现以下几个部分：
1：初始化和卸载模块
2：打开和释放模块
3： 数据读写模块
3  控制模块
4： 中断轮讯模块

static struct pci_driver demo_pci_driver = {
	.name = demo_MODULE_NAME,
	.id_table = demo_pci_tbl,
	.probe = demo_probe,
	.remove = demo_remove
	/*....*/
};

static int __init demo_init_module(void)
{
	pci_register_driver(&demo_pci_driver);
}

static void __exit demo_cleanup_module(void)
{
	pci_unregister_driver(&demo_pci_driver);
}

module_init(demo_init_module);
module_exit(demo_exit_module);

三：PCI设备操作实现
probe函数中，需要实现以下几个功能：
1； 使能PCI
int pci_enable_device(struct pci_dev *dev);

2; 请求pci资源。
  pci_request_regions(struct pci_dev *dev, char *name);

在初始化中很重要的一个操作就是让pci分配资源，如IO端口等。

3； 存取配置空间
#include <linux/pci.h>
int pci_read_config_byte(struct pci_dev *dev, int where, u8 *val);
int pci_read_config_word(struct pci_dev *dev, int where,u16 *val);
int pci_read_config_dword(struct pci_dev *dev, int where, u32 *val);
从由dev所表示的设备的配置空间读1 2 或者4 个字节。读取的值通过val指针返回。

int pci_write_config_byte(struct pci_dev *dev, int  where, u8 val);
int pci_write_config_word(struct pci_dev *dev, int where, u16 val);
int pci_write_config_dword(struct pci_dev *dev, int where, u32 val);

4: 映射IO和内存空间
每个pci可以有1-6个IO或者内存空间，并且每块空间都有一个BAR寄存器与其空间首地址
相对应。BAR0-5寄存器的最后一位只读， 为1说明空间为IO，否则为MEM。
例子：
	localAddr0 = pci_resource_start(dev, 0);
	map0 = (unsigned char *)ioremap(localAddr0, pci_resource_len(dev, 0));
5: 注册中断
	int request_irq(unsigned int irq,
			irqreturn_t (*handler)(int, void, struct pt_regs *)
			unsigned long flags,
			const char *dev_name,
			void *dev_id);


2 数据读写
	unsigned int ioread8(void *addr);
	unsigned int ioread16(void *addr);
	unsigned int ioread32(void *addr);
	
	void iowrite8(u8 value, void *addr);
	void iowrite16(u16 value, void *addr);
	void iowrite32(u32 value, void *addr);

3 中断处理
PC的中断资源比较有限，只有0-15的中断号， 因此大部分外设都是以共享的形式
申请中断号的，当中断发生的时候，中断处理程序首先负责对中断进行识别，然后在
做进一步的处理。
	irqreturn_r short_interrupt(int irq, void *dev, struct pt_regs *regs);
	
4 释放设备
pci_unregister_driver();

在pci_driver的remove中释放所有请求的资源：
iounmap(addr);
free_irq(int irq, struct pci_dev *dev);
pci_release_regions(struct pci_dev *dev);
pci_disable_device(dev);

